var searchIndex = {};
searchIndex["task_queue"] = {"doc":"Task queue The implementation of the thread pool for Rust.","items":[[3,"TaskQueue","task_queue","",null,null],[3,"Task","","",null,null],[3,"TaskQueueStats","","",null,null],[12,"threads_count","","",0,null],[12,"threads_max","","",0,null],[12,"threads_min","","",0,null],[12,"tasks_count","","",0,null],[0,"error","","TaskQueue error.",null,null],[4,"TaskQueueError","task_queue::error","",null,null],[13,"IllegalStartThreads","","",1,null],[12,"min","task_queue::error::TaskQueueError","",1,null],[12,"max","","",1,null],[13,"Io","task_queue::error","",1,null],[13,"IllegalPolicyThreads","","",1,null],[12,"min","task_queue::error::TaskQueueError","",1,null],[12,"max","","",1,null],[12,"count","","",1,null],[11,"fmt","task_queue::error","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"illegal_start_threads","","",1,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"taskqueueerror"}}],[11,"illegal_policy_threads","","",1,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"taskqueueerror"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"taskqueueerror"}}],[0,"spawn_policy","task_queue","Trait that controls the number of threads.",null,null],[3,"StaticSpawnPolicy","task_queue::spawn_policy","Policy that provide max number of threads for queue. # Examples ``` rust extern crate task_queue;",null,null],[3,"DynamicSpawnPolicy","","Policy that provide dynamic number of threads for queue. # Examples ``` rust extern crate task_queue;",null,null],[3,"ManualSpawnPolicy","","Policy that makes it possible control of the threads number manually # Examples ``` rust extern crate task_queue;",null,null],[3,"ManualSpawnPolicyController","","Controller which makes possible control of the threads number",null,null],[8,"SpawnPolicy","","",null,null],[10,"get_count","","Returns current number of threads.",2,{"inputs":[{"name":"self"},{"name":"taskqueuestats"}],"output":{"name":"usize"}}],[11,"new","","Create policy that provide max number of threads for queue.",3,{"inputs":[],"output":{"name":"self"}}],[11,"get_count","","",3,{"inputs":[{"name":"self"},{"name":"taskqueuestats"}],"output":{"name":"usize"}}],[11,"new","","Create policy that provide dynamic number of threads for queue. Policy will trying to change number of threads every 5 minutes.",4,{"inputs":[],"output":{"name":"self"}}],[11,"with_delta","","Create policy that provide dynamic number of threads for queue. Policy will trying to change number of threads no more often delta.",4,{"inputs":[{"name":"duration"}],"output":{"name":"self"}}],[11,"get_count","","",4,{"inputs":[{"name":"self"},{"name":"taskqueuestats"}],"output":{"name":"usize"}}],[11,"new","","Create policy with 10 threads",5,{"inputs":[],"output":{"name":"self"}}],[11,"with_threads","","Create policy with selected number of threads",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"get_controller","","Returns controller which makes possible control of the threads number",5,{"inputs":[{"name":"self"}],"output":{"name":"manualspawnpolicycontroller"}}],[11,"add_thread","","Increase threads counter",6,{"inputs":[{"name":"self"}],"output":null}],[11,"remove_thread","","Decrease threads counter",6,{"inputs":[{"name":"self"}],"output":null}],[11,"get_count","","",5,{"inputs":[{"name":"self"},{"name":"taskqueuestats"}],"output":{"name":"usize"}}],[11,"new","task_queue","Create new task queue with 10 threads.",7,{"inputs":[],"output":{"name":"self"}}],[11,"with_threads","","Create new task queue with selected threads count.",7,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"enqueue","","Schedule task in queue # Example ``` rust extern crate task_queue;",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"stop","","Stops tasks queue work. All task in queue will be completed by threads. Method not block current thread work, but returns threads joinHandles.",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"stop_wait","","Stops tasks queue work. All task in queue will be completed by threads. Method block current thread work.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"stop_immediately","","Stops tasks queue work immediately and return are not completed tasks. # Examples ``` rust extern crate task_queue;",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"set_spawn_policy","","Sets a policy for controlling the amount of threads",7,{"inputs":[{"name":"self"},{"name":"box"}],"output":null}],[11,"get_threads_count","","Returns current threads count",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_threads_max","","Return max threads count",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_threads_min","","Return min threads count",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"tasks_count","","Gets tasks count in queue",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drop","","All task in queue will be completed by threads.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"run","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"taskqueuestats"}}],[11,"empty","","",0,{"inputs":[],"output":{"name":"self"}}]],"paths":[[3,"TaskQueueStats"],[4,"TaskQueueError"],[8,"SpawnPolicy"],[3,"StaticSpawnPolicy"],[3,"DynamicSpawnPolicy"],[3,"ManualSpawnPolicy"],[3,"ManualSpawnPolicyController"],[3,"TaskQueue"],[3,"Task"]]};
initSearch(searchIndex);
